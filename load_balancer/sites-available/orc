# this config is mostly based on https://jupyterhub.readthedocs.io/en/stable/reference/config-proxy.html
# top-level http config for websocket headers
# If Upgrade is defined, Connection = upgrade
# If Upgrade is empty, Connection = close
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# mapping to create a variable, which is used to decide if a request must be logged or not
# this mapping is used to disable access logging for all static files from different services
map $request_uri $loggable {
    default                                             1;
    ~^/(hub|services/binder|binder|gallery)/static/ 0;
}

# https://kubernetes.io/docs/concepts/services-networking/service/#nodeport
# If you set the type field to NodePort, the Kubernetes master will allocate a port from a range specified by
# --service-node-port-range flag (default: 30000-32767),
# and each Node will proxy that port (the same port number on every Node) into your Service.
# => That's why we add all nodes into upstream
upstream gallery {
  # http://nginx.org/en/docs/http/load_balancing.html
  # least_conn;
  # server 194.95.75.9:30079 weight=3;
  server 194.95.75.9:30079;
  server 194.95.75.12:30079;
}

upstream grafana {
  server 194.95.75.9:30075;
  server 194.95.75.12:30075;
}

upstream prometheus {
  server 194.95.75.9:30073;
  server 194.95.75.12:30073;
}

# max_fails=0 => health checks are disabled for this server
# or in other words: makes nginx to accept upstream server always as healthy
# we add this in order to get rid of "no live upstreams while connecting to upstream..." errors
# https://medium.com/urbanclap-engineering/nginx-debugging-and-major-issues-solved-b33eed3b8624
upstream jhub {
  server 194.95.75.9:30080 max_fails=0;
  server 194.95.75.12:30080 max_fails=0;
}

upstream bhub {
  server 194.95.75.9:30081 max_fails=0;
  server 194.95.75.12:30081 max_fails=0;
}

upstream bjhub {
  server 194.95.75.9:30082 max_fails=0;
  server 194.95.75.12:30082 max_fails=0;
}

upstream binderlaunches {
  server 194.95.75.12:31000 max_fails=0;
}

# HTTP server to redirect notebooks.gesis.org 80 traffic to SSL/HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name notebooks.gesis.org;
    access_log off;  # turn off access log
    # Tell all requests to port 80 to be 301 (permanently) redirected to HTTPS
    return 301 https://$host$request_uri;
}

# HTTPS server for notebooks.gesis.org
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name notebooks.gesis.org;
    # generated 2020-03-17, Mozilla Guideline v5.4, nginx 1.17.7, OpenSSL 1.1.1, intermediate configuration
    # https://ssl-config.mozilla.org/#server=nginx&version=1.17.7&config=intermediate&openssl=1.1.1&guideline=5.4
    ssl_certificate /etc/letsencrypt/live/notebooks.gesis.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/notebooks.gesis.org/privkey.pem;
    include snippets/ssl.conf;

    include snippets/optimization.conf;
    #access_log off;  # turn off access log
    # turn of access log for all static files from different services
    # http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log
    #access_log /var/log/nginx/access.log;  # default from nginx.conf
    access_log /var/log/nginx/access.log combined if=$loggable;

    location = /favicon.ico { access_log off; log_not_found off; }

    # binder gallery
    # location /gallery/ {
    #     proxy_pass http://gallery;
    #     include snippets/flask.conf;
    # }

     # binder launches
     location /binderlaunches/ {
        proxy_pass http://binderlaunches;
     }

     # Grafana UI
     location /grafana/ {
         proxy_pass http://grafana/;
         include snippets/headers.conf;
     }
     # Prometheus
     location /prometheus/ {
         auth_basic "Administrator's Area";
         auth_basic_user_file /etc/letsencrypt/.htpasswd_prometheus;
         # https://github.com/prometheus/prometheus/issues/2193
         proxy_set_header Accept-Encoding "";
         proxy_pass http://prometheus/;
         include snippets/headers.conf;

         #sub_filter_types text/html;
         sub_filter_once off;
         sub_filter '="/' '="/prometheus/';
         sub_filter 'var PATH_PREFIX = "";' 'var PATH_PREFIX = "/prometheus";';
         rewrite ^/prometheus/?$ /prometheus/graph redirect;
         rewrite ^/prometheus/(.*)$ /$1 break;
     }

     # Managing literal requests to the BinderHub
     location /binder/ {
         # http://www.tornadoweb.org/en/stable/guide/running.html#running-behind-a-load-balancer
         # https://serverfault.com/questions/263022/http-streaming-server-behind-nginx
         proxy_buffering off;
         proxy_pass http://bhub;
         include snippets/headers.conf;
         proxy_set_header X-Scheme $scheme;
     }

     # For JupyterHub of binder
     location /binder/jupyter/ {
         proxy_pass http://bjhub;
         include snippets/headers.conf;
         include snippets/websocket_headers.conf;
    }

    # DNT policy
    #location = /.well-known/dnt-policy.txt {
    #    alias /var/www/prod/static/dnt-policy.txt;
    #}
    # redirect from old location
    rewrite ^/jupyter/(.*)$ /$1 permanent;
    # Managing literal requests to the JupyterHub
    location / {
        ## maintenance page
        #error_page 503 /static/maintenance.html;
        #return 503;


        proxy_buffering off;
        proxy_pass http://jhub;
        include snippets/headers.conf;
        include snippets/websocket_headers.conf;
        proxy_set_header X-Scheme $scheme;
    }
    #location ~ ^/(faq|about|terms_of_use|hub/static)/ {
    #    proxy_buffering off;
    #    proxy_pass http://jhub;
    #    include snippets/headers.conf;
    #    include snippets/websocket_headers.conf;
    #    proxy_set_header X-Scheme $scheme;
    #}

    include snippets/ignore_fonts.conf;

    location /static/ {
        access_log off;
        root /var/www/prod;
    }

    location = /robots.txt {
       # https://www.robotstxt.org/robotstxt.html
       #return 200 "User-agent: *\nDisallow:\nSitemap: https://notebooks.gesis.org/sitemap.xml\n";
       root /var/www/prod/static/;
    }
    location = /sitemap.xml {
        root /var/www/prod/static/;
    }

    include snippets/_secret.conf;
}
