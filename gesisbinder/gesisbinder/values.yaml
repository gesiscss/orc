etcJupyter:
  jupyter_notebook_config.json:
    NotebookApp:
      allow_origin: '*'
      tornado_settings:
        trust_xheaders: true
      # shutdown the server after no activity
      shutdown_no_activity_timeout: 600

    # if a user leaves a notebook with a running kernel,
    # the effective idle timeout will typically be CULL_TIMEOUT + CULL_KERNEL_TIMEOUT
    # as culling the kernel will register activity,
    # resetting the no_activity timer for the server as a whole
    # Check also jupyterhub.cull.timeout config
    MappingKernelManager:
      # shutdown kernels after no activity
      cull_idle_timeout: 600
      # check for idle kernels this often
      cull_interval: 60
      # a kernel with open connections but no activity still counts as idle
      # this is what allows us to shutdown servers
      # when people leave a notebook open and wander off
      cull_connected: true

# this is set in _secret.yaml
# this is required to send GESIS Binder events to mybinder.org's StackDriver
eventsArchiver:
  serviceAccountKey: ""


binderhub:
  pdb:
    maxUnavailable: 1
  replicas: 2
  config:
    GitHubRepoProvider:
      # Add banned repositories to the list below
      # They should be strings that will match "^<org-name>/<repo-name>.*"
      banned_specs:
        # e.g. '^org/repo.*'
        - ^a2nk/.*
        - ^imhajes/.*
        - ^ines/spacy-binder.*
        - ^soft4voip/rak.*
        - ^hmharshit/cn-ait.*
        - ^shishirchoudharygic/mltraining.*
        - ^hmharshit/mltraining.*
        - ^FDesnoyer/MathExp.*
        - ^GuitarsAI/.*
        # ferarussia is clearly a fake GitHub account created by GuitarsAI to get around ban
        # it was created the day GuitarsAI was blocked and does the same thing
        - ^ferarussia/.*

      high_quota_specs:
        - ^gesiscss/.*
      #spec_config:
      #  - pattern: ^gesiscss/.*
      #    config:
      #      quota: 200
    GitLabRepoProvider:
      banned_specs:
        - ^h4j3s1978%2F.*
        - ^jasmt507%2F.*
        - .*%2Fabooz.*

    GitRepoProvider:
      banned_specs:
        - ^(git|https?)%3A%2F%2Fgithub.com%2Fa2nk%2F.*
        - ^https%3A%2F%2Fbitbucket.org%2Fnikiubel%2Fnikiubel.bitbucket.io.git/.*
        - ^https%3A%2F%2Fjovian.ml%2Fapi%2Fgit%2F.*
        - ^https%3A%2F%2Fframagit.org%2FCecGhesq%2Flic_mdf_nsi_1.*
        - ^(git|https?)%3A%2F%2Fnotabug.org%2FulslcuRux3Y%2F.*
        - ^(git|https?)%3A%2F%2Fgitlab.com%2Fjasmt507%2F.*
        - ^(git|https?)%3A%2F%2Fgitlab.com%2Fh4j3s1978%2F.*
        - .*%2Fabooz.*

    BinderHub:
      pod_quota: 120
      base_url: /binder/
      use_registry: true
      build_image: quay.io/jupyterhub/repo2docker:2022.02.0-114.g27fbab6
      build_node_selector:
        user: worker
        # userbinder: worker
      per_repo_quota: 100
      per_repo_quota_higher: 200
      build_memory_limit: "8G"
      build_memory_request: "1G"

      template_path: /etc/binderhub/templates
      # look at configmap for static files here https://discourse.jupyter.org/t/customizing-jupyterhub-on-kubernetes/1769/4?u=bitniks
      #extra_static_path: /etc/binderhub/custom/gesisbinder/static
      #extra_static_url_prefix: /extra_static/
      cors_allow_origin: '*'

  podAnnotations:
    rollme: "rollme"
  extraVolumes:
    - name: binder-templates
      configMap:
        name: binder-templates
    - name: binder-templates-gesis
      configMap:
        name: binder-templates-gesis
  extraVolumeMounts:
    - name: binder-templates
      mountPath: /etc/binderhub/templates
    - name: binder-templates-gesis
      mountPath: /etc/binderhub/templates/gesis

  extraConfig:
    01-template-variables:  |
      import uuid
      template_vars = {
          "version": "beta",
          "home_url": "/",
          "gesisbinder_url": "/binder/",
          "about_url": "/about.html",
          "tou_url": "/terms.html",
          "imprint_url": "https://www.gesis.org/en/institute/imprint/",
          "data_protection_url": "https://www.gesis.org/en/institute/data-protection/",
          "gesis_url": "https://www.gesis.org/en/home/",
          "status_url": "https://gesisnotebooks.betteruptime.com",
          "gallery_url": "/gallery/",
          "faq_url": "/faq.html",
          "active": "binder",
          "static_nginx": "/static/",
          "static_version": uuid.uuid4().hex,
          "user": None,
          "production": production,
      }
      c.BinderHub.template_variables.update(template_vars)
    11-eventlog: |
      from datetime import datetime
      import jsonschema
      import requests
      from tornado.log import app_log
      from time import sleep
      def emit(self, schema_name, version, event):
          """
          Emit event with given schema / version in a capsule.
          """
          if not self.handlers_maker:
              # If we don't have a handler setup, ignore everything
              return

          if (schema_name, version) not in self.schemas:
              raise ValueError(f'Schema {schema_name} version {version} not registered')
          schema = self.schemas[(schema_name, version)]
          jsonschema.validate(event, schema)

          capsule = {
              'timestamp': datetime.utcnow().isoformat() + 'Z',
              'schema': schema_name,
              'version': version
          }
          capsule.update(event)
          self.log.info(capsule)

          # token of binder user in gallery
          headers = {'Authorization': f'Bearer {os.environ["GESIS_API_TOKEN"]}'}
          api_url = os.environ["GESIS_API_URL"]

          # emit function is called after .launch, so we can wait before retry
          # this delay shouldn't effect the user
          retries = 3
          delay = 4
          try:
              for i in range(retries):
                  r = requests.post(api_url, data=capsule, headers=headers)
                  if r.status_code != 201 and i < 2:
                      sleep(delay)
                      delay *= 2
                  else:
                      break
              if r.status_code != 201:
                  app_log.error(f"Error: Event stream failed after {retries} retries for {capsule} with status code {r.status_code}")
          except Exception as e:
              app_log.error(f"Error: Event stream failed for {capsule}: {e}")

      from binderhub.events import EventLog
      EventLog.emit = emit

  service:
    type: NodePort

  dind:
    enabled: false

  imageCleaner:
    enabled: false

  jupyterhub:
    cull:
      # cull every 11 minutes so it is out of phase
      # with the proxy check-routes interval of five minutes
      every: 660
      timeout: 600
      # maxAge is 1 hours: 1 * 3600 = 3600
      maxAge: 3600
    hub:
      # NOTE: hub and proxy must have 1 pod (https://github.com/jupyterhub/jupyterhub/issues/2841#issuecomment-561848594)
      # replicas: 1
      pdb:
        minAvailable: 0
      networkPolicy:
        # z2jh chart has a default ingress rule which allows inbound traffic
        # only to port 8081 (API port)
        # from pods with label "hub.jupyter.org/network-access-hub",
        # user and proxy pods have this label
        # z2jh chart has a default egress rule: allow all outbound traffic for hub
        enabled: true
      nodeSelector:
        base: worker  # where database is
      baseUrl: /binder/jupyter/
      db:
        type: postgres
      authenticatePrometheus: false
      config:
        BinderSpawner:
          cors_allow_origin: '*'
      extraConfig:
        02-orc: |
          c.KubeSpawner.extra_pod_config.update({'restart_policy': 'Never'})
    proxy:
      https:
        # https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/master/CHANGELOG.md#breaking-changes
        # for z2jh 0.10.0+ https needs to be enabled.
        enabled: true
        type: offload
      chp:
        networkPolicy:
          # z2jh chart has a default ingress rule which allows inbound traffic
          # to port 8000 (HTTP port) from pods with label "hub.jupyter.org/network-access-proxy-HTTP" and
          # to port 8001 (API port) from pods with label "hub.jupyter.org/network-access-proxy-API",
          # and only hub pod has these labels
          # so only the hub pod can talk to the proxy's API and HTTP ports
          # z2jh chart has a default egress rule: allow all outbound traffic for proxy
          enabled: true
        # NOTE: hub and proxy must have 1 pod (https://github.com/jupyterhub/jupyterhub/issues/2841#issuecomment-561848594)
        # replicas: 1
        # PDB relocated to proxy.chp.pdb https://github.com/jupyterhub/zero-to-jupyterhub-k8s/pull/1938
        pdb:
          minAvailable: 0
      service:
        type: NodePort
    singleuser:
      networkPolicy:
        enabled: true
        # z2jh chart has a default ingress rule which allows inbound traffic
        # only to port 8888
        # from pods with label "hub.jupyter.org/network-access-singleuser",
        # hub and proxy pods have this label
        #ingress: []
        # z2jh chart has a default egress rule which restricts outbound traffic to only JupyterHub API port
        egress: []  # no additional egress rule, this empty list also overrides the egress rule defined in values.yaml of z2jh
      nodeSelector:
        #user: worker
        userbinder: worker
      storage:
        extraVolumes:
          - name: etc-jupyter
            configMap:
              name: user-etc-jupyter
          - name: etc-jupyter-templates
            configMap:
              name: user-etc-jupyter-templates
        extraVolumeMounts:
          - name: etc-jupyter
            mountPath: /etc/jupyter
          - name: etc-jupyter-templates
            mountPath: /etc/jupyter/templates

    # we dont need this because we have only 1 node for user pods
    scheduling:
      userScheduler:
        enabled: false
      podPriority:
        enabled: false
      userPlaceholder:
        enabled: false
