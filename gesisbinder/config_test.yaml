projectName: gesis-binder-staging

binderhub:
  resources:
    requests:
      cpu: "0.1"
      memory: 512Mi
    limits:
      cpu: "1"
      memory: 1Gi

  extraVolumes:
    - name: binder-templates
      configMap:
        name: binder-templates
    - name: binder-templates-gesis
      configMap:
        name: binder-templates-gesis
  extraVolumeMounts:
    - name: binder-templates
      mountPath: /etc/binderhub/templates
    - name: binder-templates-gesis
      mountPath: /etc/binderhub/templates/gesis

  config:
    BinderHub:
      debug: true
      hub_url: https://notebooks-test.gesis.org/binder/jupyter/
      image_prefix: gesiscss/binder-test-r2d-g5b5b759-
  extraConfig:
    00-template-variables:  |
      production = False
    11-eventlog: |
      from datetime import datetime
      import jsonschema
      import requests
      from tornado.log import app_log
      from time import sleep
      def emit(self, schema_name, version, event):
          capsule = {
              'timestamp': datetime.utcnow().isoformat() + 'Z',
              'schema': schema_name,
              'version': version
          }
          capsule.update(event)
      
          # token of binder user in gallery
          headers = {'Authorization': f'Bearer {os.environ["GESIS_API_TOKEN"]}'}
          api_url = os.environ["GESIS_API_URL"]

          # emit function is called after .launch, so we can wait before retry
          # this delay shouldn't effect the user
          retries = 3
          delay = 4
          try:
              for i in range(retries):
                  r = requests.post(api_url, data=capsule, headers=headers)
                  if r.status_code != 201 and i < 2:
                      sleep(delay)
                      delay *= 2
                  else:
                      break
              if r.status_code != 201:
                  app_log.error(f"Error: Event stream failed after {retries} retries for {capsule} with status code {r.status_code}")
          except Exception as e:
              app_log.error(f"Error: Event stream failed for {capsule}: {e}")

      from binderhub.events import EventLog
      EventLog.emit = emit

  service:
    annotations:
      prometheus.io/scrape: 'false'
    nodePort: 30181

  jupyterhub:
    debug:
      enabled: true

    hub:
      resources:
        requests:
          cpu: "0.1"
          memory: 512Mi
        limits:
          cpu: "1"
          memory: 1Gi
      service:
        annotations:
          prometheus.io/scrape: 'false'

    proxy:
      service:
        nodePorts:
          http: 30185
          https: 30182
      chp:
        resources:
          requests:
            cpu: "0.1"
            memory: 256Mi
          limits:
            cpu: "0.5"
            memory: 512Mi

    singleuser:
      cpu:
        guarantee: 0.1
        limit: 0.5
      memory:
        guarantee: 256M
        limit: 512M
